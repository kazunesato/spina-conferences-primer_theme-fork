- cache [@article, @article.authorships, @article.affiliations, @article.content(:abstract), @article.issue, @article.issue.volume, @article.issue.content(:cover_img)] do
  = render partial: 'metadata'

  = render(Primer::HeadingComponent.new(tag: :h1)) { @article.title }

  = render(Primer::BoxComponent.new(display: :flex, direction: [:column, nil, nil, :row])) do
    = render(Primer::BoxComponent.new(flex: :auto, mr: [nil, nil, nil, 4], col: [nil, nil, nil, 8])) do
      %ul.list-style-none.d-flex.flex-column.flex-sm-row.my-2
        - @article.affiliations.each do |affiliation|
          = render(Primer::BoxComponent.new(display: :flex, tag: :li, mr: 4, align_items: :center)) do
            = render(Primer::BoxComponent.new(mr: 2)) do
              = render(Primer::OcticonComponent.new('person'))
            = render(Primer::BoxComponent.new(display: :flex, tag: :address, direction: :column)) do
              = render(Primer::Beta::Text.new(tag: :div, font_weight: :bold)) { affiliation.name }
              = render(Primer::Beta::Text.new(tag: :div, color: :muted)) { affiliation.institution.name }

      - if @article.has_content?(:abstract)
        = render(Primer::HeadingComponent.new(tag: :h2, mt: 4, font_size: 3)) { t '.abstract' }
        = render(Primer::Markdown.new) { @article.content.html(:abstract).to_s }

    = render(Primer::BorderBoxComponent.new(ml: [nil, nil, nil, 4], col: [nil, nil, nil, 4])) do |sidebar|
      - sidebar.body do
        - if @article.issue.has_content?(:cover_img)
          = render partial: 'spina/conferences/primer_theme/journal/issues/issue_cover', locals: { issue: @article.issue, cover_img: @article.issue.content(:cover_img), size: [200, 400] }
        = render(Primer::BorderBoxComponent.new) do |component|
          - if @article.has_content?(:attachment)
            - component.row do
              = render(Primer::ButtonComponent.new(tag: :a, href: frontend_issue_article_path(@issue, @article, format: :pdf), download: '', scheme: :primary)) do
                = render Primer::OcticonComponent.new('download')
                = t '.download'
          - component.row do
            = render(Primer::HeadingComponent.new(tag: :h2, font_size: 4, color: :muted)) { t '.published' }
            = render(Primer::Beta::Text.new) do
              = time_tag @article.issue.date, format: :long
          - component.row do
            = render(Primer::HeadingComponent.new(tag: :h2, font_size: 4, color: :muted)) { t '.issue' }
            = render(Primer::Beta::Text.new) do
              = link_to t('spina.conferences.primer_theme.journal.volume_issue',
                          volume_number: @article.issue.volume.number,
                          issue_number: @article.issue.number), frontend_issue_path(@article.issue)
          - unless @article.doi.blank?
            - component.row do
              = render(Primer::HeadingComponent.new(tag: :h2, font_size: 4, color: :muted)) { t '.doi' }
              = render(Primer::Beta::Text.new(tag: :div, color: :muted, mt: 1)) do
                = link_to nil, @article.doi
          - unless @article.url.blank?
            - component.row do
              = render(Primer::HeadingComponent.new(tag: :h2, font_size: 4, color: :muted)) { t '.url' }
              = render(Primer::Beta::Text.new(tag: :div, color: :muted, mt: 1)) do
                = link_to nil, @article.url
          - component.row do
            = render(Primer::HeadingComponent.new(tag: :h2, font_size: 4, color: :muted)) { t '.permalink' }
            = render(Primer::Beta::Text.new(tag: :div, color: :muted, mt: 1)) do
              = link_to nil, frontend_issue_article_url(@issue, @article)
          - component.row do
            = render(Primer::BoxComponent.new(display: :flex, direction: :column)) do
              = render(Primer::Beta::Text.new(mb: 2)) do
                Copyright Â© #{@article.issue.date.year} #{@article.affiliations.collect(&:name).to_sentence}
              - unless @licence.nil?
                - cache [@licence, @licence.content(:logo), @licence.content(:url)] do
                  %a{ rel: 'licence', href: @licence.content(:url) }
                    - if @licence.has_content?(:logo)
                      = image_tag main_app.url_for(@licence.content(:logo).variant(resize_to_limit: [200, 200])),
                                  srcset: srcset(@licence.content(:logo), variant: { resize_to_limit: [200, 200] }),
                                  alt_description: t('.licence_logo'),
                                  draggable: false,
                                  class: 'py-1'
            - unless @licence.nil?
              - cache [@licence, @licence.content(:text)] do
                = @licence.has_content?(:text) && render(Primer::Beta::Text.new(mt: 1)) { @licence.content(:text) }

          - if @article.draft?
            - component.row do
              = render(Primer::Beta::Text.new(tag: :div, color: :danger, font_weight: :bold)) { t '.draft' }
